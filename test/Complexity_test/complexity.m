


%% Complexity analysis for SLVD and Dual List Decoder

x_list_size = 1:10:1e4;
c1 = 1.5;

% SLVD
k = 64;   % # of input bits
m = 0;    % # of parity bits generated by crc
v = 14;   % # of memory elements

% List decoder 1
k1 = 32;
m1 = 3;
v1 = 11;

% List decoder 2
k2 = 32;
m2 = 2;
v2 = 12;

% SLVD
ssv_slvd = ssv_complexity(k, m, v, c1);
c_ssv_slvd = ssv_slvd * ones(size(x_list_size));
normalizaion_factor = ssv_slvd;

% List decoder 1
ssv_list_1 = ssv_complexity(k1, m1, v1, c1);
c_ssv_list_1 = ssv_list_1 * ones(size(x_list_size));

% List decoder 2
ssv_list_2 = ssv_complexity(k2, m2, v2, c1);
c_ssv_list_2 = ssv_list_2 * ones(size(x_list_size));


figure;
legends = {"2^{14} SSV Complexity", "Dual Decoder 1 SSV Complexity", ...
           "Dual Decoder 2 SSV Complexity"};

semilogx(x_list_size, c_ssv_slvd./normalizaion_factor, '--', Color='black');
hold on;
semilogx(x_list_size, c_ssv_list_1./normalizaion_factor, '--', Color='r');
hold on;
semilogx(x_list_size, c_ssv_list_2./normalizaion_factor, '--', Color='magenta');

ylim([0 1.5]);
yticks(0:0.25:1.5);
ylabel("Normalized Complexity (or time)");
xlabel("Constrained List Size");
legend(legends);

hold off;
grid on;



function [c_ssv] = ssv_complexity(k, m, v, c1)
c_ssv = (2^(v+1)-2) + 1.5*(2^(v+1)-2) + 1.5*(k+m-v)*2^(v+1) + ...
         c1*(2*(k+m+v) + 1.5*(k+m));
end

function [c_trace] = trace_complexity(c1, eL, k, m, v)
c_trace = c1*(eL-1)*((2*(k+m+v)+1.5*(k+m)));
end

function [c_list] = list_complexity(c2, eI)
c_list = c2*eI*log(eI);
end